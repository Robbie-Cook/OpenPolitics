{"ast":null,"code":"var __jsx = React.createElement;\nimport styled from \"styled-components\";\nimport React, { Component } from \"react\";\nimport Colors from \"../Colors\";\nimport Spacer from \"../Spacer\";\nimport Codify from \"../Codify\";\n/**\r\n *  Get appropriate heading\r\n *  Type: h1, h2, etc,\r\n *  Content: The child elements\r\n */\n\nfunction getHeading(props, type, className) {\n  const myStyles = `\n        font-family: \"Roboto Slab\", sans-serif;\n        font-weight: bold;\n        margin: ${props.noMargin ? \"0px\" : props.margin};\n        text-transform: lowercase;\n        color: ${Colors.text.color};\n      `;\n  const h1Height = \"53px\";\n  const H1 = styled.h1`\n        ${myStyles}\n        font-size: ${h1Height};\n        line-height: ${h1Height};\n      `; // H2 inherits and overrides styles from H1\n\n  const H2 = styled.h2`\n    ${myStyles}\n    font-size: 40px;\n  `;\n  const H3 = styled.h3`\n    ${myStyles}\n    font-size: 30px;\n  `;\n  const H4 = styled.h4`\n    ${myStyles}\n    font-size: 25px;\n  `;\n  const H5 = styled.h5`\n    ${myStyles}\n    font-size: 20px;\n  `;\n  let headingElementToUse = \"\"; // Probably should use TypeScript for this\n\n  if (type === \"h1\" || type === undefined) {\n    headingElementToUse = H1;\n  } else if (type === \"h2\") {\n    headingElementToUse = H2;\n  } else if (type === \"h3\") {\n    headingElementToUse = H3;\n  } else if (type === \"h4\") {\n    headingElementToUse = H4;\n  } else if (type === \"h5\") {\n    headingElementToUse = H5;\n  }\n\n  const headingElement = React.createElement(headingElementToUse, {\n    className: className\n  }, props.children);\n  return __jsx(React.Fragment, null, props.codify ? __jsx(Codify, null, headingElement) : headingElement);\n}\n/**\r\n * Heading section for a page\r\n * Should be used for all headings. Currently, only supports h1 and h2.\r\n * Example usage: <Heading type=\"h2\">My heading</Heading>\r\n */\n\n\nexport default function Heading(props) {\n  const HeadingWrapper = styled.div`\n    display: flex;\n    width: fit-content;\n    & * {\n      align-self: center;\n    }\n    ${props.center && \"align-self: center\"};\n    ${props.style};\n  `;\n  return __jsx(HeadingWrapper, null, getHeading(props, props.type, props.className));\n}\nHeading.defaultProps = {\n  margin: \"0 0 20px 0;\",\n  center: false,\n  noMargin: false\n};","map":null,"metadata":{},"sourceType":"module"}