{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    e\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    border: 8px solid white;\\n    border-radius: 100px;\\n    width: \", \"px;\\n    height: 40px;\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport TransitionWrapper from \"../animation/TransitionWrapper\";\nexport function ProgressBar(props) {\n  var width = 300;\n  var ProgressBarWrapper = styled.div(_templateObject(), width);\n\n  var getProgressBarSectionRender = function getProgressBarSectionRender(section) {} // const myWidth = (100 / width) * section.getPercent() \n  // var sections = (() => {\n  //   let jsx = []\n  //   props.sections.forEach((section) => {\n  //     jsx.append(getProgressBarSectionRender(section))\n  //   })\n  // })()\n  ;\n\n  return (// <ProgressBarWrapper>\n    //   {sections}\n    // </ProgressBarWrapper>\n    __jsx(React.Fragment, null)\n  );\n} // Represents a portion of the progress bar.\n// e.g index, percent, etc.\n\nexport function ProgressBarSectionData() {\n  var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var percent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'green';\n  // The data which represents a section of the progress bar  \n  var data = {\n    index: index,\n    percent: percent,\n    color: color\n  };\n\n  var getIndex = function getIndex() {\n    return data.index;\n  };\n\n  var getPercent = function getPercent() {\n    return data.percent;\n  };\n\n  var getColor = function getColor() {\n    return data.color;\n  };\n} // Given a precalculated width, gives a progress bar graphic\n// Internal function\n\nfunction ProgressBarSection(props) {\n  var styledProgressBarSection = styled.div(_templateObject2());\n  return;\n}\n\nProgressBar.defaultProps = {\n  sections: [new ProgressBarSectionData()]\n};","map":{"version":3,"sources":["C:\\Users\\Robbie\\Repos\\OpenPolitics\\src\\components\\ui-components\\ProgressBar.js"],"names":["React","Component","PropTypes","styled","TransitionWrapper","ProgressBar","props","width","ProgressBarWrapper","div","getProgressBarSectionRender","section","ProgressBarSectionData","index","percent","color","data","getIndex","getPercent","getColor","ProgressBarSection","styledProgressBarSection","defaultProps","sections"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AAEA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACjC,MAAMC,KAAK,GAAG,GAAd;AAEA,MAAMC,kBAAkB,GAAGL,MAAM,CAACM,GAAV,oBAGbF,KAHa,CAAxB;;AAOA,MAAIG,2BAA2B,GAAG,SAA9BA,2BAA8B,CAASC,OAAT,EAAkB,CAEnD,CAFiC,CAChC;AAGF;AACA;AACA;AACA;AACA;AACA;AATA;;AAWA,SACE;AACA;AACA;AACA;AAJF;AAOD,C,CAED;AACA;;AACA,OAAO,SAASC,sBAAT,GAA0E;AAAA,MAA1CC,KAA0C,uEAAlC,CAAkC;AAAA,MAA/BC,OAA+B,uEAArB,EAAqB;AAAA,MAAjBC,KAAiB,uEAAT,OAAS;AAC/E;AACA,MAAMC,IAAI,GAAG;AACTH,IAAAA,KAAK,EAAEA,KADE;AAETC,IAAAA,OAAO,EAAEA,OAFA;AAGTC,IAAAA,KAAK,EAAEA;AAHE,GAAb;;AAMA,MAAIE,QAAQ,GAAG,SAAXA,QAAW,GAAW;AACxB,WAAOD,IAAI,CAACH,KAAZ;AACD,GAFD;;AAIA,MAAIK,UAAU,GAAG,SAAbA,UAAa,GAAW;AAC1B,WAAOF,IAAI,CAACF,OAAZ;AACD,GAFD;;AAIA,MAAIK,QAAQ,GAAG,SAAXA,QAAW,GAAW;AACxB,WAAOH,IAAI,CAACD,KAAZ;AACD,GAFD;AAGD,C,CAED;AACA;;AACA,SAASK,kBAAT,CAA4Bd,KAA5B,EAAmC;AACjC,MAAIe,wBAAwB,GAAGlB,MAAM,CAACM,GAAV,oBAA5B;AAGA;AACD;;AAIDJ,WAAW,CAACiB,YAAZ,GAA2B;AACzBC,EAAAA,QAAQ,EAAE,CAAC,IAAIX,sBAAJ,EAAD;AADe,CAA3B","sourcesContent":["import React, { Component } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport TransitionWrapper from \"../animation/TransitionWrapper\"\r\n\r\nexport function ProgressBar(props) {\r\n  const width = 300\r\n  \r\n  const ProgressBarWrapper = styled.div`\r\n    border: 8px solid white;\r\n    border-radius: 100px;\r\n    width: ${width}px;\r\n    height: 40px;\r\n  `\r\n\r\n  var getProgressBarSectionRender = function(section) {\r\n    // const myWidth = (100 / width) * section.getPercent() \r\n  }\r\n\r\n  // var sections = (() => {\r\n  //   let jsx = []\r\n  //   props.sections.forEach((section) => {\r\n  //     jsx.append(getProgressBarSectionRender(section))\r\n  //   })\r\n  // })()\r\n\r\n  return (\r\n    // <ProgressBarWrapper>\r\n    //   {sections}\r\n    // </ProgressBarWrapper>\r\n    <></>\r\n  )\r\n\r\n}\r\n\r\n// Represents a portion of the progress bar.\r\n// e.g index, percent, etc.\r\nexport function ProgressBarSectionData(index = 0, percent = 50, color = 'green') {\r\n  // The data which represents a section of the progress bar  \r\n  const data = {\r\n      index: index, \r\n      percent: percent, \r\n      color: color\r\n    }\r\n\r\n  let getIndex = function() {\r\n    return data.index\r\n  }\r\n\r\n  let getPercent = function() {\r\n    return data.percent\r\n  }\r\n\r\n  let getColor = function() {\r\n    return data.color\r\n  }\r\n}\r\n\r\n// Given a precalculated width, gives a progress bar graphic\r\n// Internal function\r\nfunction ProgressBarSection(props) {\r\n  let styledProgressBarSection = styled.div`\r\n    e\r\n  `\r\n  return \r\n}\r\n\r\n\r\n\r\nProgressBar.defaultProps = {\r\n  sections: [new ProgressBarSectionData()]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}