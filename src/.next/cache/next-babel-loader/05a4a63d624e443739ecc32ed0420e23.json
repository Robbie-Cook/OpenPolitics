{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Robbie\\\\Repos\\\\OpenPolitics\\\\src\\\\components\\\\Codify.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n      font-size: \", \";\\n      font-weight: bold;\\n      font-family: \\\"Roboto Slab\\\", sans-serif;\\n      color: \", \";\\n      opacity: \", \";\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      display: flex;\\n      align-items: center;\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/**\r\n *  A styling component, which puts < /> tags around its children\r\n */\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Spacer from \"./Spacer\";\nimport styled from \"styled-components\";\nimport Colors from \"./Colors\";\n/** Icons to display with text */\n\nvar TextIcon =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TextIcon, _Component);\n\n  function TextIcon() {\n    _classCallCheck(this, TextIcon);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextIcon).apply(this, arguments));\n  }\n\n  _createClass(TextIcon, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null, this.props.content);\n    }\n  }]);\n\n  return TextIcon;\n}(Component);\n\nTextIcon.propTypes = {\n  position: PropTypes.string // where the icon is to be displayed relative to the content (left, right, ...)\n  // Sample component\n\n};\n\nvar Codify =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(Codify, _Component2);\n\n  function Codify() {\n    _classCallCheck(this, Codify);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Codify).apply(this, arguments));\n  }\n\n  _createClass(Codify, [{\n    key: \"render\",\n    value: function render() {\n      var Wrapper = styled.div(_templateObject());\n      /* \r\n        Icons currently hard-coded, but should be passed as a prop if \r\n        custom icons are needed for headers \r\n       */\n\n      var MyIcon = styled.span(_templateObject2(), this.props.fontSize, this.props.color, this.props.opacity);\n\n      var leftIcon = __jsx(MyIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"<\");\n\n      var rightIcon = __jsx(React.Fragment, null, __jsx(Spacer, {\n        width: this.props.rightTagSpacing,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), __jsx(MyIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \" />\"));\n\n      return __jsx(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, __jsx(TextIcon, {\n        position: \"left\",\n        content: leftIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), this.props.children, __jsx(TextIcon, {\n        position: \"right\",\n        content: rightIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Codify;\n}(Component);\n\nCodify.propTypes = {\n  color: PropTypes.string,\n  fontSize: PropTypes.string,\n  rightTagSpacing: PropTypes.string,\n  opacity: PropTypes.string\n};\nCodify.defaultProps = {\n  color: Colors.page.secondaryColor,\n  fontSize: \"69px\",\n  rightTagSpacing: \"13px\",\n  opacity: \"1\"\n};\nexport default Codify;","map":{"version":3,"sources":["C:\\Users\\Robbie\\Repos\\OpenPolitics\\src\\components\\Codify.js"],"names":["React","Component","PropTypes","Spacer","styled","Colors","TextIcon","props","content","propTypes","position","string","Codify","Wrapper","div","MyIcon","span","fontSize","color","opacity","leftIcon","rightIcon","rightTagSpacing","children","defaultProps","page","secondaryColor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAIA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA;;IACMC,Q;;;;;;;;;;;;;6BACK;AACP,aAAO,4BAAG,KAAKC,KAAL,CAAWC,OAAd,CAAP;AACD;;;;EAHoBP,S;;AAKvBK,QAAQ,CAACG,SAAT,GAAqB;AACnBC,EAAAA,QAAQ,EAAER,SAAS,CAACS,MADD,CACS;AAG9B;;AAJqB,CAArB;;IAKMC,M;;;;;;;;;;;;;6BACK;AACP,UAAMC,OAAO,GAAIT,MAAM,CAACU,GAAX,mBAAb;AAIA;;;;;AAIA,UAAMC,MAAM,GAAGX,MAAM,CAACY,IAAV,qBACG,KAAKT,KAAL,CAAWU,QADd,EAID,KAAKV,KAAL,CAAWW,KAJV,EAKC,KAAKX,KAAL,CAAWY,OALZ,CAAZ;;AAQA,UAAMC,QAAQ,GAAG,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAjB;;AACA,UAAMC,SAAS,GACb,4BACE,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,KAAKd,KAAL,CAAWe,eAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,CADF;;AAOA,aACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,QAAD;AAAU,QAAA,QAAQ,EAAC,MAAnB;AAA0B,QAAA,OAAO,EAAEF,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEG,KAAKb,KAAL,CAAWgB,QAFd,EAGE,MAAC,QAAD;AAAU,QAAA,QAAQ,EAAC,OAAnB;AAA2B,QAAA,OAAO,EAAEF,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF;AAOD;;;;EAjCkBpB,S;;AAmCrBW,MAAM,CAACH,SAAP,GAAmB;AACjBS,EAAAA,KAAK,EAAEhB,SAAS,CAACS,MADA;AAEjBM,EAAAA,QAAQ,EAAEf,SAAS,CAACS,MAFH;AAGjBW,EAAAA,eAAe,EAAEpB,SAAS,CAACS,MAHV;AAIjBQ,EAAAA,OAAO,EAAEjB,SAAS,CAACS;AAJF,CAAnB;AAMAC,MAAM,CAACY,YAAP,GAAsB;AACpBN,EAAAA,KAAK,EAAEb,MAAM,CAACoB,IAAP,CAAYC,cADC;AAEpBT,EAAAA,QAAQ,EAAE,MAFU;AAGpBK,EAAAA,eAAe,EAAE,MAHG;AAIpBH,EAAAA,OAAO,EAAE;AAJW,CAAtB;AAMA,eAAeP,MAAf","sourcesContent":["/**\r\n *  A styling component, which puts < /> tags around its children\r\n */\r\n\r\nimport React, { Component } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Spacer from \"./Spacer\"\r\nimport styled from \"styled-components\"\r\nimport Colors from \"./Colors\"\r\n\r\n/** Icons to display with text */\r\nclass TextIcon extends Component {\r\n  render() {\r\n    return <>{this.props.content}</>\r\n  }\r\n}\r\nTextIcon.propTypes = {\r\n  position: PropTypes.string, // where the icon is to be displayed relative to the content (left, right, ...)\r\n}\r\n\r\n// Sample component\r\nclass Codify extends Component {\r\n  render() {\r\n    const Wrapper  = styled.div`\r\n      display: flex;\r\n      align-items: center;\r\n    `\r\n    /* \r\n      Icons currently hard-coded, but should be passed as a prop if \r\n      custom icons are needed for headers \r\n     */\r\n    const MyIcon = styled.span`\r\n      font-size: ${this.props.fontSize};\r\n      font-weight: bold;\r\n      font-family: \"Roboto Slab\", sans-serif;\r\n      color: ${this.props.color};\r\n      opacity: ${this.props.opacity};\r\n    `\r\n\r\n    const leftIcon = <MyIcon>&lt;</MyIcon>\r\n    const rightIcon = (\r\n      <>\r\n        <Spacer width={this.props.rightTagSpacing} />\r\n        <MyIcon> /&gt;</MyIcon>\r\n      </>\r\n    )\r\n\r\n    return (\r\n      <Wrapper>\r\n        <TextIcon position=\"left\" content={leftIcon} />\r\n        {this.props.children}\r\n        <TextIcon position=\"right\" content={rightIcon} />\r\n      </Wrapper>\r\n    )\r\n  }\r\n}\r\nCodify.propTypes = {\r\n  color: PropTypes.string,\r\n  fontSize: PropTypes.string,\r\n  rightTagSpacing: PropTypes.string,\r\n  opacity: PropTypes.string,\r\n}\r\nCodify.defaultProps = {\r\n  color: Colors.page.secondaryColor,\r\n  fontSize: \"69px\",\r\n  rightTagSpacing: \"13px\",\r\n  opacity: \"1\",\r\n}\r\nexport default Codify\r\n"]},"metadata":{},"sourceType":"module"}